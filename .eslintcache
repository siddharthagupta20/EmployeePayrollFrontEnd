[{"G:\\Training\\JavaScript\\React\\employee-payroll\\src\\index.js":"1","G:\\Training\\JavaScript\\React\\employee-payroll\\src\\App.js":"2","G:\\Training\\JavaScript\\React\\employee-payroll\\src\\reportWebVitals.js":"3","G:\\Training\\JavaScript\\React\\employee-payroll\\src\\components\\payroll-form\\payroll-form.jsx":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":364,"mtime":1608636555128,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":10292,"mtime":1608253758000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1ngvjhi",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"G:\\Training\\JavaScript\\React\\employee-payroll\\src\\index.js",[],["20","21"],"G:\\Training\\JavaScript\\React\\employee-payroll\\src\\App.js",[],"G:\\Training\\JavaScript\\React\\employee-payroll\\src\\reportWebVitals.js",[],"G:\\Training\\JavaScript\\React\\employee-payroll\\src\\components\\payroll-form\\payroll-form.jsx",["22","23","24","25","26","27","28","29","30","31"],"import React,{useState, useEffect} from \"react\";\nimport profile1 from '../../assets/profile-images/Ellipse -3.png';\nimport profile2 from '../../assets/profile-images/Ellipse 1.png';\nimport profile3 from '../../assets/profile-images/Ellipse -8.png';\nimport profile4 from '../../assets/profile-images/Ellipse -7.png';\nimport logo from '../../assets/images/logo.png';\nimport '../payroll-form/payroll-form.scss';\nimport {useParam, link, withRouter } from 'react-router-dom';\n\nconst PayrollForm = (props) => {\n    let initialValue = {\n        name: '',\n        profileArray:[\n            {url: '../../../assets/profile-images/Ellipse -3.png'},\n            {url: '../../../assets/profile-images/Ellipse 1.png'},\n            {url: '../../../assets/profile-images/Ellipse -8.png'},\n            {url: '../../../assets/profile-images/Ellipse -7.png'},\n        ],\n        allDepartment:[\n            'HR','Sales','Finance','Engineer','Others'\n        ],\n        departmentValue: [],\n        gender:'',\n        salary: '',\n        day:'1',\n        month: 'Jan',\n        year: '2020',\n        startDate: '',\n        notes: '',\n        id: '',\n        profileUrl:'',\n        isUpdate: false,\n        error: {\n            department :'',\n            name:'',\n            gender:'',\n            salary:'',\n            profileUrl:'',\n            startDate:''\n        }\n    }\n    const [formValue, setForm] = useState(initialValue);\n\n    const changeValue = (event) => {\n        setForm({...formValue, [event.target.name]: event.target.value})\n    }\n\n    const onCheckChange = (name) => {\n        let index = formValue.departmentValue.indexOf(name);\n        let checkArray = [...formValue.departmentValue]\n        if(index > -1)\n            checkArray.splice(index, 1)\n        else\n            checkArray.push(name);\n        setForm({...formValue, departmentValue: checkArray});\n    }\n\n    const getChecked = (name) => {\n        return formValue.departmentValue && formValue.departmentValue.includes(name);\n    }\n\n    const validData = async () => {\n        let isError = false;\n        let error = {\n            department: '',\n            name : '',\n            gender: '',\n            salary: '',\n            profileUrl: '',\n            startDate : ''\n        }\n        if(formValue.name.length < 1){\n            error.name = 'name is required field'\n            isError = true;\n        }\n        if(formValue.gender.length < 1){\n            error.gender = 'gender is required field'\n            isError = true;\n        }\n        if(formValue.salary.length <1 ){\n            error.salary = 'salary is required field'\n            isError = true;\n        }\n        if(formValue.profileUrl.length <1){\n            error.profileUrl = 'profile is required field'\n            isError = true;\n        }\n        if(formValue.departmentValue.length <1){\n            error.department = 'department is required field'\n            isError = true;\n        }\n        if(formValue.notes.length<1){\n            error.notes = 'notes is required field'\n            isError = true;\n        }\n        await setForm({...formValue, error: error});\n        return isError;\n\n    }\n\n    const save = async (event) => {\n        event.preventDefault();\n    }\n\n    const reset = () => {\n        setForm({ ...initialValue, id: formValue.id, isUpdate: formValue.isUpdate});\n        console.log(formValue);\n    }\n    return(\n            <div className=\"payroll-main\">\n                <header className=\"header row center\">\n                    <div className=\"logo\">\n                        <img src={logo} alt=\"\"/>\n                        <div>\n                            <span className=\"emp-text\">EMPLOYEE</span>\n                            <span className=\"emp-text emp-payroll\">PAYROLL</span>\n                        </div>\n                    </div>\n                </header>\n                <div className=\"content\">\n                    <form className=\"form\" action=\"#\" onSubmit={save}>\n                        <div className=\"form-head\">Employee Payroll form</div>\n                        <div className=\"row\">\n                            <label htmlFor=\"name\" className=\"label text\">Name</label>\n                            <input className=\"input\" type=\"text\" id=\"name\" name=\"name\" value={formValue.name} onChange={changeValue} placeholder=\"Your name..\" />\n                        </div>\n                        <div className=\"error\">{formValue.error.name}</div>\n                        <div className=\"row\">\n                            <label htmlFor=\"profileUrl\" className=\"label text\">Profile image</label>\n                            <div className=\"profile-radio-button\">\n                                <label>\n                                    <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl=='../../assets/profile-images/Ellipse -3.png'} \n                                    value=\"../../assets/profile-images/Ellipse -3.png\" onChange={changeValue} />\n                                    <img className=\"profile\" src={profile1} alt=\"\" />\n                                </label>\n                                <label>\n                                    <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl=='../../assets/profile-images/Ellipse 1.png'}  \n                                    value=\"../../assets/profile-images/Ellipse 1.png\" onChange={changeValue} />\n                                    <img className=\"profile\" src={profile2} alt=\"\"/>\n                                </label>\n                                <label>\n                                    <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl=='../../assets/profile-images/Ellipse -8.png'}\n                                    value=\"../../assets/profile-images/Ellipse -8.png\" onChange={changeValue}/>\n                                    <img className=\"profile\"  src={profile3} alt=\"\"/>\n                                </label>\n                                <label>\n                                    <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl=='../../assets/profile-images/Ellipse -7.png'}\n                                    value=\"../../assets/profile-images/Ellipse -7.png\" onChange={changeValue}/>\n                                    <img className=\"profile\" src={profile4} alt=\"\" />\n                                </label>\n                            </div>\n                        </div>\n                        <div className=\"error\">{formValue.error.profileUrl}</div>\n                        <div className=\"row\">\n                            <label className=\"label text\" htmlFor=\"gender\">Gender</label>\n                            <div>\n                                <input type=\"radio\" onChange={changeValue} name=\"gender\" id=\"male\" value=\"male\"/>\n                                <label className=\"text\" htmlFor=\"male\">Male</label>\n                                <input type=\"radio\" name=\"gender\" onChange={changeValue} id=\"female\" value=\"female\"/>\n                                <label htmlFor=\"female\"  className=\"text\">Female</label>\n                            </div>\n                        </div>\n                        <div className=\"error\">{formValue.error.gender}</div>\n                        <div className=\"row\">\n                            <label className=\"label text\" htmlFor=\"department\">Department</label>\n                            <div>\n                                {formValue.allDepartment.map(item => (\n                                    <span key={item}>\n                                        <input type=\"checkbox\" className=\"checkbox\" onChange={() => onCheckChange(item)} name={item}\n                                        checked={getChecked(item)} value={item} />\n                                        <label className=\"label text\" htmlFor={item}>{item}</label>\n                                    </span>\n                                ))}\n                            </div>\n                        </div>\n                        <div className=\"error\">{formValue.error.department}</div>\n                        <div className=\"row\">\n                            <label htmlFor=\"salary\" className=\"label text\">Salary</label>\n                            <input type=\"range\" name=\"salary\" id=\"salary\" onChange={changeValue} className=\"input\" min=\"300000\" max=\"500000\" step=\"100\" defaultValue=\"400000\"/>\n                        </div>\n                        <div className=\"error\"> {formValue.error.salary}</div>\n                        <div className=\"row\">\n                            <label htmlFor=\"startDate\" className=\"label text\" >Start Date</label>\n                            <div>\n                                <select name=\"day\" id=\"day\" onChange={changeValue}><option value=\"1\">1</option><option value=\"2\">2</option><option value=\"3\">3</option></select>\n                                <select name=\"month\" id=\"month\" onChange={changeValue}><option value=\"Jan\">January</option><option value=\"Feb\">February</option></select>\n                                <select name=\"year\" id=\"year\" onChange={changeValue}><option value=\"2020\">2020</option></select>\n                            </div>\n                        </div>\n                        <div className=\"error\">{formValue.error.startDate}</div>\n                        <div className=\"row\">\n                            <label htmlFor=\"notes\" className=\"label text\">Notes</label>\n                            <textarea name=\"notes\" onChange={changeValue} value={formValue.notes} id=\"notes\" className=\"input\" placeholder=\"\" style={{height:'100%'}}></textarea>\n                        </div>\n                        <div className=\"buttonParent\">\n                            <a className=\"resetButton button cancelButton\">Cancel</a>\n                            <div className=\"submit-react\">\n                                <button type=\"submit\" className=\"button submitButton\" id=\"submitButton\">{formValue.isUpdate ? \"update\":\"Submit\"}</button>\n                                <button type=\"button\" onClick={reset} className=\"resetButton button\">Reset</button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n}\n\nexport default PayrollForm;",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":1,"column":25,"nodeType":"38","messageId":"39","endLine":1,"endColumn":34},{"ruleId":"36","severity":1,"message":"40","line":8,"column":9,"nodeType":"38","messageId":"39","endLine":8,"endColumn":17},{"ruleId":"36","severity":1,"message":"41","line":8,"column":19,"nodeType":"38","messageId":"39","endLine":8,"endColumn":23},{"ruleId":"36","severity":1,"message":"42","line":8,"column":25,"nodeType":"38","messageId":"39","endLine":8,"endColumn":35},{"ruleId":"36","severity":1,"message":"43","line":62,"column":11,"nodeType":"38","messageId":"39","endLine":62,"endColumn":20},{"ruleId":"44","severity":1,"message":"45","line":132,"column":104,"nodeType":"46","messageId":"47","endLine":132,"endColumn":106},{"ruleId":"44","severity":1,"message":"45","line":137,"column":104,"nodeType":"46","messageId":"47","endLine":137,"endColumn":106},{"ruleId":"44","severity":1,"message":"45","line":142,"column":104,"nodeType":"46","messageId":"47","endLine":142,"endColumn":106},{"ruleId":"44","severity":1,"message":"45","line":147,"column":104,"nodeType":"46","messageId":"47","endLine":147,"endColumn":106},{"ruleId":"48","severity":1,"message":"49","line":196,"column":29,"nodeType":"50","endLine":196,"endColumn":76},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useParam' is defined but never used.","'link' is defined but never used.","'withRouter' is defined but never used.","'validData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]